x
х
х
x
x
x
x




Конструкторы помогают из набора данных строить составной объект,
а селекторы нам позволяют извлекать из этого объекта извлекать необходимые
куски и части. Если мы говорим про составные данные - точки, то селекторы
позволяют извлекать оттуда Х и У.

// Конструктор
const point = makePoint(x,y);
// Селекторы
getX(point);
geyY(point);

toString(point); //(5,-7)

В этом и заключается вся суть абстракции. Мы знаем как создать сущность и какие
операции к ней применимы. Обычно это и называется дизайном кода, а сами
операции + конструктор это api или интерфейс модуля/пакета/библиотеки.

Абстракция заключается в том, что конкретное представление сегмента определяется
внутри функций, описывающих работу с отрезками и зависит от создателя библиотеки.
С точки зрения клиента библиотеки, например, человека, который использует ее,
не важно как конкретно устроен сегмент, важно только то, что есть некоторый набор
функций (абстракция), позволяющий работать с ним.

Cтроковая интерполяция: с помощью такого синтаксиса - `${myValue}` - вы
подставляете значение myValue в строку.

Патерн(Принцип) одного уровня абстраций - на одном текущем уровне, на котором
мы работаем в одном срезе, мы должны оперировать только объекта этого среза и
не оперировать объектами, которые не имеют к нему отношения и находятся ниже
или выше по уровням абстракций.
Таким образом гораздо легче поддерживать и изменять наш код. Если нам чем то
не нравится код нижнего уровня - мы можем исправить его реализацию так, чтобы она
была более эффективной или лучше подходила для текущей ситуации.

Production code - код, который реально будет использоваться.
Лабораторный код - код для обучения.

highload - высоко нагруженные проекты.
enterprise - большое предприятие.

Композиция - применение одной функции к результату другой.

const resual = Math.round(value);
Math.abs(result); // == Math.abs(Math.round(value))

Замыкание - аргументы, определяемые в момент определения функции доступны всем
вложенным функциям. Мы запоминаем в момент определения внешнее окружение и
потом можем им пользоваться, даже если мы находимся в другом месте, с другим
окружением.

Фукнции высшего порядка - функции, принимающие на вход в качестве аргументов
другие функции или возвращающие другие функции в качестве результата.
Более идеоматичным является использование таких функций.

export const cons = (x, y) => (m) => m(x, y);

// BEGIN (write your solution here)
export const car = (a) => a((x,y) => (x));
export const cdr = (a) => a((x,y) => (y));
// END
